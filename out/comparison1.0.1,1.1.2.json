[{"id":"da1cef5c47ef7f09e54eccef8d9aa568fa267638","instances":[{"path":"./1.0.1/src/ajax/ajax.js","lines":[239,275],"code":"// Counter for holding the number of active queries\nactive: 0,\n\n// Determines if an XMLHttpRequest was successful or not\nhttpSuccess: function(r) {\n\ttry {\n\t\treturn !r.status && location.protocol == \"file:\" ||\n\t\t\t( r.status >= 200 && r.status < 300 ) || r.status == 304 ||\n\t\t\tjQuery.browser.safari && r.status == undefined;\n\t} catch(e){}\n\n\treturn false;\n},\n\n// Determines if an XMLHttpRequest returns NotModified\nhttpNotModified: function(xml, url) {\n\ttry {\n\t\tvar xmlRes = xml.getResponseHeader(\"Last-Modified\");\n\n\t\t// Firefox always returns 200. check Last-Modified date\n\t\treturn xml.status == 304 || xmlRes == jQuery.lastModified[url] ||\n\t\t\tjQuery.browser.safari && xml.status == undefined;\n\t} catch(e){}\n\n\treturn false;\n},\n\n// Get the data out of an XMLHttpRequest.\n// Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n// otherwise return plain text.\nhttpData: function(r,type) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it\n\tif ( type == \"script\" ) eval.call( window, data );"},{"path":"./1.1.2/src/ajax/ajax.js","lines":[757,795],"code":"// Counter for holding the number of active queries\nactive: 0,\n\n// Determines if an XMLHttpRequest was successful or not\nhttpSuccess: function( r ) {\n\ttry {\n\t\treturn !r.status && location.protocol == \"file:\" ||\n\t\t\t( r.status >= 200 && r.status < 300 ) || r.status == 304 ||\n\t\t\tjQuery.browser.safari && r.status == undefined;\n\t} catch(e){}\n\treturn false;\n},\n\n// Determines if an XMLHttpRequest returns NotModified\nhttpNotModified: function( xml, url ) {\n\ttry {\n\t\tvar xmlRes = xml.getResponseHeader(\"Last-Modified\");\n\n\t\t// Firefox always returns 200. check Last-Modified date\n\t\treturn xml.status == 304 || xmlRes == jQuery.lastModified[url] ||\n\t\t\tjQuery.browser.safari && xml.status == undefined;\n\t} catch(e){}\n\treturn false;\n},\n\n/* Get the data out of an XMLHttpRequest.\n * Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n * otherwise return plain text.\n * (String) data - The type of data that you're expecting back,\n * (e.g. \"xml\", \"html\", \"script\")\n */\nhttpData: function( r, type ) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it in global context\n\tif ( type == \"script\" )\n\t\tjQuery.globalEval( data );"}]},
{"id":"0615c405d32176bab3cd52503150828e77a4d2f2","instances":[{"path":"./1.0.1/src/fx/fx.js","lines":[259,306],"code":"\t/**\n\t * @private\n\t */\n\tanimate: function(prop,speed,callback) {\n\t\treturn this.queue(function(){\n\t\t\n\t\t\tthis.curAnim = prop;\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tvar e = new jQuery.fx( this, jQuery.speed(speed,callback), p );\n\t\t\t\tif ( prop[p].constructor == Number )\n\t\t\t\t\te.custom( e.cur(), prop[p] );\n\t\t\t\telse\n\t\t\t\t\te[ prop[p] ]( prop );\n\t\t\t}\n\t\t\t\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\n\tsetAuto: function(e,p) {"},{"path":"./1.1.2/src/fx/fx.js","lines":[281,362],"code":"\t/**\n\t * A function for making your own, custom animations. The key aspect of\n\t * this function is the object of style properties that will be animated,\n\t * and to what end. Each key within the object represents a style property\n\t * that will also be animated (for example: \"height\", \"top\", or \"opacity\").\n\t *\n\t * Note that properties should be specified using camel case\n\t * eg. marginLeft instead of margin-left.\n\t *\n\t * The value associated with the key represents to what end the property\n\t * will be animated. If a number is provided as the value, then the style\n\t * property will be transitioned from its current state to that new number.\n\t * Otherwise if the string \"hide\", \"show\", or \"toggle\" is provided, a default\n\t * animation will be constructed for that property.\n\t *\n\t * @example $(\"p\").animate({\n\t *   height: 'toggle', opacity: 'toggle'\n\t * }, \"slow\");\n\t *\n\t * @example $(\"p\").animate({\n\t *   left: 50, opacity: 'show'\n\t * }, 500);\n\t *\n\t * @example $(\"p\").animate({\n\t *   opacity: 'show'\n\t * }, \"slow\", \"easein\");\n\t * @desc An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function (Only 'linear' is provided by default, with jQuery).\n\t *\n\t * @name animate\n\t * @type jQuery\n\t * @param Hash params A set of style attributes that you wish to animate, and to what end.\n\t * @param String|Number speed (optional) A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param String easing (optional) The name of the easing effect that you want to use (Plugin Required).\n\t * @param Function callback (optional) A function to be executed whenever the animation completes.\n\t * @cat Effects\n\t */\n\tanimate: function( prop, speed, easing, callback ) {\n\t\treturn this.queue(function(){\n\t\t\n\t\t\tthis.curAnim = jQuery.extend({}, prop);\n\t\t\tvar opt = jQuery.speed(speed, easing, callback);\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tvar e = new jQuery.fx( this, opt, p );\n\t\t\t\tif ( prop[p].constructor == Number )\n\t\t\t\t\te.custom( e.cur(), prop[p] );\n\t\t\t\telse\n\t\t\t\t\te[ prop[p] ]( prop );\n\t\t\t}\n\t\t\t\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\t\n\tspeed: function(speed, easing, fn) {"}]},
{"id":"7831c7dd777002a7a831fbd0ad3645568b25c8ee","instances":[{"path":"./1.0.1/src/fx/fx.js","lines":[354,380],"code":"queue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];\n\t\n\t\tif ( f ) f.apply( elem );\n\t}\n},\n\n/*\n * I originally wrote fx() as a clone of moo.fx and in the process\n * of making it small in size the code became illegible to sane\n * people. You've been warned.\n */\n\nfx: function( elem, options, prop ){\n\n\tvar z = this;\n\n\t// The users options"},{"path":"./1.1.2/src/fx/fx.js","lines":[387,413],"code":"queue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];\n\t\n\t\tif ( f ) f.apply( elem );\n\t}\n},\n\n/*\n * I originally wrote fx() as a clone of moo.fx and in the process\n * of making it small in size the code became illegible to sane\n * people. You've been warned.\n */\n\nfx: function( elem, options, prop ){\n\n\tvar z = this;\n\n\t// The styles"}]},
{"id":"ab24e9b8fae29713deeaa585eddacad49ab14cbc","instances":[{"path":"./1.0.1/src/jquery/jquery.js","lines":[362,429],"code":"/**\n * Retreive the text contents of all matched elements. The result is\n * a string that contains the combined text contents of all matched\n * elements. This method works on both HTML and XML documents.\n *\n * @example $(\"p\").text();\n * @before <p>Test Paragraph.</p>\n * @result Test Paragraph.\n *\n * @name text\n * @type String\n * @cat DOM\n */\ntext: function(e) {\n\te = e || this;\n\tvar t = \"\";\n\tfor ( var j = 0; j < e.length; j++ ) {\n\t\tvar r = e[j].childNodes;\n\t\tfor ( var i = 0; i < r.length; i++ )\n\t\t\tif ( r[i].nodeType != 8 )\n\t\t\t\tt += r[i].nodeType != 1 ?\n\t\t\t\t\tr[i].nodeValue : jQuery.fn.text([ r[i] ]);\n\t}\n\treturn t;\n},\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * The way that is works is that it goes through the first element argument\n * provided and finds the deepest element within the structure - it is that\n * element that will en-wrap everything else.\n *\n * @example $(\"p\").wrap(\"<div class='wrap'></div>\");\n * @before <p>Test Paragraph.</p>\n * @result <div class='wrap'><p>Test Paragraph.</p></div>\n *\n * @name wrap\n * @type jQuery\n * @any String html A string of HTML, that will be created on the fly and wrapped around the target.\n * @any Element elem A DOM element that will be wrapped.\n * @any Array<Element> elems An array of elements, the first of which will be wrapped.\n * @any Object obj Any object, converted to a string, then a text node.\n * @cat DOM/Manipulation\n */\nwrap: function() {\n\t// The elements to wrap the target around\n\tvar a = jQuery.clean(arguments);\n\t\n\t// Wrap each of the matched elements individually\n\treturn this.each(function(){\n\t\t// Clone the structure that we're using to wrap\n\t\tvar b = a[0].cloneNode(true);\n\t\t\n\t\t// Insert it before the element to be wrapped\n\t\tthis.parentNode.insertBefore( b, this );\n\t\t\n\t\t// Find he deepest point in the wrap structure\n\t\twhile ( b.firstChild )\n\t\t\tb = b.firstChild;\n\t\t\n\t\t// Move the matched element to within the wrap structure\n\t\tb.appendChild( this );\n\t});\n},"},{"path":"./1.1.2/src/jquery/jquery.js","lines":[533,634],"code":"/**\n * Set the text contents of all matched elements.\n *\n * Similar to html(), but escapes HTML (replace \"<\" and \">\" with their\n * HTML entities).\n *\n * @example $(\"p\").text(\"<b>Some</b> new text.\");\n * @before <p>Test Paragraph.</p>\n * @result <p>&lt;b&gt;Some&lt;/b&gt; new text.</p>\n * @desc Sets the text of all paragraphs.\n *\n * @example $(\"p\").text(\"<b>Some</b> new text.\", true);\n * @before <p>Test Paragraph.</p>\n * @result <p>Some new text.</p>\n * @desc Sets the text of all paragraphs.\n *\n * @name text\n * @type String\n * @param String val The text value to set the contents of the element to.\n * @cat DOM/Attributes\n */\ntext: function(e) {\n\tif ( typeof e == \"string\" )\n\t\treturn this.empty().append( document.createTextNode( e ) );\n\n\tvar t = \"\";\n\tjQuery.each( e || this, function(){\n\t\tjQuery.each( this.childNodes, function(){\n\t\t\tif ( this.nodeType != 8 )\n\t\t\t\tt += this.nodeType != 1 ?\n\t\t\t\t\tthis.nodeValue : jQuery.fn.text([ this ]);\n\t\t});\n\t});\n\treturn t;\n},\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided (which is generated, on the fly, from the provided HTML)\n * and finds the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap(\"<div class='wrap'></div>\");\n * @before <p>Test Paragraph.</p>\n * @result <div class='wrap'><p>Test Paragraph.</p></div>\n * \n * @name wrap\n * @type jQuery\n * @param String html A string of HTML, that will be created on the fly and wrapped around the target.\n * @cat DOM/Manipulation\n */\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided and finding the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n\t * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap( document.getElementById('content') );\n * @before <p>Test Paragraph.</p><div id=\"content\"></div>\n * @result <div id=\"content\"><p>Test Paragraph.</p></div>\n *\n * @name wrap\n * @type jQuery\n * @param Element elem A DOM element that will be wrapped around the target.\n * @cat DOM/Manipulation\n */\nwrap: function() {\n\t// The elements to wrap the target around\n\tvar a = jQuery.clean(arguments);\n\n\t// Wrap each of the matched elements individually\n\treturn this.each(function(){\n\t\t// Clone the structure that we're using to wrap\n\t\tvar b = a[0].cloneNode(true);\n\n\t\t// Insert it before the element to be wrapped\n\t\tthis.parentNode.insertBefore( b, this );\n\n\t\t// Find the deepest point in the wrap structure\n\t\twhile ( b.firstChild )\n\t\t\tb = b.firstChild;\n\n\t\t// Move the matched element to within the wrap structure\n\t\tb.appendChild( this );"}]},
{"id":"16e6da46b0fede38694602be57eeda53aa5e1c9d","instances":[{"path":"./1.0.1/src/jquery/jquery.js","lines":[899,915],"code":"/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];"},{"path":"./1.1.2/src/jquery/jquery.js","lines":[1353,1369],"code":"/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];"}]},
{"id":"ff818596893fbf651d8b8c9aa4fe6b0c238051cf","instances":[{"path":"./1.0.1/src/jquery/jquery.js","lines":[1178,1189],"code":"if ( !t.indexOf(\"//\") ) {\n\tcontext = context.documentElement;\n\tt = t.substr(2,t.length);\n} else if ( !t.indexOf(\"/\") ) {\n\tcontext = context.documentElement;\n\tt = t.substr(1,t.length);\n\t// FIX Assume the root element is right :(\n\tif ( t.indexOf(\"/\") >= 1 )\n\t\tt = t.substr(t.indexOf(\"/\"),t.length);\n}\n\t\nvar ret = [context];"},{"path":"./1.1.2/src/selector/selector.js","lines":[124,137],"code":"if ( !t.indexOf(\"//\") ) {\n\tcontext = context.documentElement;\n\tt = t.substr(2,t.length);\n\n// And the / root expression\n} else if ( !t.indexOf(\"/\") ) {\n\tcontext = context.documentElement;\n\tt = t.substr(1,t.length);\n\tif ( t.indexOf(\"/\") >= 1 )\n\t\tt = t.substr(t.indexOf(\"/\"),t.length);\n}\n\n// Initialize the search\nvar ret = [context], done = [], last = null;"}]},
{"id":"bf0aecf3838924c6d0832a680af5b7145c85d69e","instances":[{"path":"./1.0.1/src/jquery/jquery.js","lines":[1523,1656],"code":"\t/*\n\t * A number of helper functions used for managing events.\n\t * Many of the ideas behind this code orignated from Dean Edwards' addEvent library.\n\t */\n\tevent: {\n\t\n\t\t// Bind an event to an element\n\t\t// Original by Dean Edwards\n\t\tadd: function(element, type, handler) {\n\t\t\t// For whatever reason, IE has trouble passing the window object\n\t\t\t// around, causing it to be cloned in the process\n\t\t\tif ( jQuery.browser.msie && element.setInterval != undefined )\n\t\t\t\telement = window;\n\t\t\n\t\t\t// Make sure that the function being executed has a unique ID\n\t\t\tif ( !handler.guid )\n\t\t\t\thandler.guid = this.guid++;\n\t\t\t\t\n\t\t\t// Init the element's event structure\n\t\t\tif (!element.events)\n\t\t\t\telement.events = {};\n\t\t\t\n\t\t\t// Get the current list of functions bound to this event\n\t\t\tvar handlers = element.events[type];\n\t\t\t\n\t\t\t// If it hasn't been initialized yet\n\t\t\tif (!handlers) {\n\t\t\t\t// Init the event handler queue\n\t\t\t\thandlers = element.events[type] = {};\n\t\t\t\t\n\t\t\t\t// Remember an existing handler, if it's already there\n\t\t\t\tif (element[\"on\" + type])\n\t\t\t\t\thandlers[0] = element[\"on\" + type];\n\t\t\t}\n\n\t\t\t// Add the function to the element's handler list\n\t\t\thandlers[handler.guid] = handler;\n\t\t\t\n\t\t\t// And bind the global event handler to the element\n\t\t\telement[\"on\" + type] = this.handle;\n\t\n\t\t\t// Remember the function in a global list (for triggering)\n\t\t\tif (!this.global[type])\n\t\t\t\tthis.global[type] = [];\n\t\t\tthis.global[type].push( element );\n\t\t},\n\t\t\n\t\tguid: 1,\n\t\tglobal: {},\n\t\t\n\t\t// Detach an event or set of events from an element\n\t\tremove: function(element, type, handler) {\n\t\t\tif (element.events)\n\t\t\t\tif (type && element.events[type])\n\t\t\t\t\tif ( handler )\n\t\t\t\t\t\tdelete element.events[type][handler.guid];\n\t\t\t\t\telse\n\t\t\t\t\t\tfor ( var i in element.events[type] )\n\t\t\t\t\t\t\tdelete element.events[type][i];\n\t\t\t\telse\n\t\t\t\t\tfor ( var j in element.events )\n\t\t\t\t\t\tthis.remove( element, j );\n\t\t},\n\t\t\n\t\ttrigger: function(type,data,element) {\n\t\t\t// Touch up the incoming data\n\t\t\tdata = data || [];\n\t\n\t\t\t// Handle a global trigger\n\t\t\tif ( !element ) {\n\t\t\t\tvar g = this.global[type];\n\t\t\t\tif ( g )\n\t\t\t\t\tfor ( var i = 0; i < g.length; i++ )\n\t\t\t\t\t\tthis.trigger( type, data, g[i] );\n\t\n\t\t\t// Handle triggering a single element\n\t\t\t} else if ( element[\"on\" + type] ) {\n\t\t\t\t// Pass along a fake event\n\t\t\t\tdata.unshift( this.fix({ type: type, target: element }) );\n\t\n\t\t\t\t// Trigger the event\n\t\t\t\telement[\"on\" + type].apply( element, data );\n\t\t\t}\n\t\t},\n\t\t\n\t\thandle: function(event) {\n\t\t\tif ( typeof jQuery == \"undefined\" ) return;\n\n\t\t\tevent = event || jQuery.event.fix( window.event );\n\t\n\t\t\t// If no correct event was found, fail\n\t\t\tif ( !event ) return;\n\t\t\n\t\t\tvar returnValue = true;\n\n\t\t\tvar c = this.events[event.type];\n\t\t\n\t\t\tfor ( var j in c ) {\n\t\t\t\tif ( c[j].apply( this, [event] ) === false ) {\n\t\t\t\t\tevent.preventDefault();"},{"path":"./1.1.2/src/jquery/jquery.js","lines":[1681,1791],"code":"\t/**\n\t * Translate all items in an array to another array of items.\n\t *\n\t * The translation function that is provided to this method is \n\t * called for each item in the array and is passed one argument: \n\t * The item to be translated.\n\t *\n\t * The function can then return the translated value, 'null'\n\t * (to remove the item), or  an array of values - which will\n\t * be flattened into the full array.\n\t *\n\t * @example $.map( [0,1,2], function(i){\n\t *   return i + 4;\n\t * });\n\t * @result [4, 5, 6]\n\t * @desc Maps the original array to a new one and adds 4 to each value.\n\t *\n\t * @example $.map( [0,1,2], function(i){\n\t *   return i > 0 ? i + 1 : null;\n\t * });\n\t * @result [2, 3]\n\t * @desc Maps the original array to a new one and adds 1 to each\n\t * value if it is bigger then zero, otherwise it's removed-\n\t * \n\t * @example $.map( [0,1,2], function(i){\n\t *   return [ i, i + 1 ];\n\t * });\n\t * @result [0, 1, 1, 2, 2, 3]\n\t * @desc Maps the original array to a new one, each element is added\n\t * with it's original value and the value plus one.\n\t *\n\t * @name $.map\n\t * @type Array\n\t * @param Array array The Array to translate.\n\t * @param Function fn The function to process each item against.\n\t * @cat JavaScript\n\t */\n\tmap: function(elems, fn) {\n\t\t// If a string is passed in for the function, make a function\n\t\t// for it (a handy shortcut)\n\t\tif ( typeof fn == \"string\" )\n\t\t\tfn = new Function(\"a\",\"return \" + fn);\n\n\t\tvar result = [], r = [];\n\n\t\t// Go through the array, translating each of the items to their\n\t\t// new value (or values).\n\t\tfor ( var i = 0, el = elems.length; i < el; i++ ) {\n\t\t\tvar val = fn(elems[i],i);\n\n\t\t\tif ( val !== null && val != undefined ) {\n\t\t\t\tif ( val.constructor != Array ) val = [val];\n\t\t\t\tresult = result.concat( val );\n\t\t\t}\n\t\t}\n\n\t\tvar r = result.length ? [ result[0] ] : [];\n\n\t\tcheck: for ( var i = 1, rl = result.length; i < rl; i++ ) {\n\t\t\tfor ( var j = 0; j < i; j++ )\n\t\t\t\tif ( result[i] == r[j] )\n\t\t\t\t\tcontinue check;\n\n\t\t\tr.push( result[i] );\n\t\t}\n\n\t\treturn r;\n\t}\n});\n\n/**\n * Contains flags for the useragent, read from navigator.userAgent.\n * Available flags are: safari, opera, msie, mozilla\n *\n * This property is available before the DOM is ready, therefore you can\n * use it to add ready events only for certain browsers.\n *\n * There are situations where object detections is not reliable enough, in that\n * cases it makes sense to use browser detection. Simply try to avoid both!\n *\n * A combination of browser and object detection yields quite reliable results.\n *\n * @example $.browser.msie\n * @desc Returns true if the current useragent is some version of microsoft's internet explorer\n *\n * @example if($.browser.safari) { $( function() { alert(\"this is safari!\"); } ); }\n * @desc Alerts \"this is safari!\" only for safari browsers\n *\n * @property\n * @name $.browser\n * @type Boolean\n * @cat JavaScript\n */\n \n/*\n * Whether the W3C compliant box model is being used.\n *\n * @property\n * @name $.boxModel\n * @type Boolean"}]},
{"id":"88d002ffb7edfc2493f973dabc93bd53b1c70c88","instances":[{"path":"./1.1.2/src/ajax/ajaxTest.js","lines":[99,108],"code":"test(\"test global handlers - success\", function() {\n\texpect(8);\n\tstop();\n\tvar counter = { complete: 0, success: 0, error: 0, send: 0 },\n\t\tsuccess = function() { counter.success++ },\n\t\terror = function() { counter.error++ },\n\t\tcomplete = function() { counter.complete++ },\n\t\tsend = function() { counter.send++ };\n\n\t$('#foo').ajaxStart(complete).ajaxStop(complete).ajaxSend(send).ajaxComplete(complete).ajaxError(error).ajaxSuccess(success);"},{"path":"./1.1.2/src/ajax/ajaxTest.js","lines":[127,135],"code":"test(\"test global handlers - failure\", function() {\n\texpect(8);\n\tstop();\n\tvar counter = { complete: 0, success: 0, error: 0, send: 0 },\n\t\tsuccess = function() { counter.success++ },\n\t\terror = function() { counter.error++ },\n\t\tcomplete = function() { counter.complete++ },\n\t\tsend = function() { counter.send++ };\n\t$.ajaxTimeout(0);"}]}]
