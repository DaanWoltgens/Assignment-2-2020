[{"id":"8f3b75a82ffe7ca64631c8fa1f878e0b13e4257c","instances":[{"path":"./1.0.2/src/ajax/ajax.js","lines":[734,773],"code":"// Counter for holding the number of active queries\nactive: 0,\n\n// Determines if an XMLHttpRequest was successful or not\nhttpSuccess: function(r) {\n\ttry {\n\t\treturn !r.status && location.protocol == \"file:\" ||\n\t\t\t( r.status >= 200 && r.status < 300 ) || r.status == 304 ||\n\t\t\tjQuery.browser.safari && r.status == undefined;\n\t} catch(e){}\n\n\treturn false;\n},\n\n// Determines if an XMLHttpRequest returns NotModified\nhttpNotModified: function(xml, url) {\n\ttry {\n\t\tvar xmlRes = xml.getResponseHeader(\"Last-Modified\");\n\n\t\t// Firefox always returns 200. check Last-Modified date\n\t\treturn xml.status == 304 || xmlRes == jQuery.lastModified[url] ||\n\t\t\tjQuery.browser.safari && xml.status == undefined;\n\t} catch(e){}\n\n\treturn false;\n},\n\n/* Get the data out of an XMLHttpRequest.\n * Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n * otherwise return plain text.\n * (String) data - The type of data that you're expecting back,\n * (e.g. \"xml\", \"html\", \"script\")\n */\nhttpData: function(r,type) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it\n\tif ( type == \"script\" ) eval.call( window, data );"},{"path":"./1.1.2/src/ajax/ajax.js","lines":[757,795],"code":"// Counter for holding the number of active queries\nactive: 0,\n\n// Determines if an XMLHttpRequest was successful or not\nhttpSuccess: function( r ) {\n\ttry {\n\t\treturn !r.status && location.protocol == \"file:\" ||\n\t\t\t( r.status >= 200 && r.status < 300 ) || r.status == 304 ||\n\t\t\tjQuery.browser.safari && r.status == undefined;\n\t} catch(e){}\n\treturn false;\n},\n\n// Determines if an XMLHttpRequest returns NotModified\nhttpNotModified: function( xml, url ) {\n\ttry {\n\t\tvar xmlRes = xml.getResponseHeader(\"Last-Modified\");\n\n\t\t// Firefox always returns 200. check Last-Modified date\n\t\treturn xml.status == 304 || xmlRes == jQuery.lastModified[url] ||\n\t\t\tjQuery.browser.safari && xml.status == undefined;\n\t} catch(e){}\n\treturn false;\n},\n\n/* Get the data out of an XMLHttpRequest.\n * Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n * otherwise return plain text.\n * (String) data - The type of data that you're expecting back,\n * (e.g. \"xml\", \"html\", \"script\")\n */\nhttpData: function( r, type ) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it in global context\n\tif ( type == \"script\" )\n\t\tjQuery.globalEval( data );"}]},
{"id":"731c72e9b1ef4dd1f5385ee1b0d8f2918dc74d9b","instances":[{"path":"./1.0.2/src/dimensions/dimensions.js","lines":[24,34],"code":"jQuery.fn.height = function() {\n\tif ( this.get(0) == window )\n\t\treturn self.innerHeight ||\n\t\t\tjQuery.boxModel && document.documentElement.clientHeight ||\n\t\t\tdocument.body.clientHeight;\n\t\n\tif ( this.get(0) == document )\n\t\treturn Math.max( document.body.scrollHeight, document.body.offsetHeight );\n\t\n\treturn this.css(\"height\");\n};"},{"path":"./1.0.2/src/dimensions/dimensions.js","lines":[54,64],"code":"jQuery.fn.width = function() {\n\tif ( this.get(0) == window )\n\t\treturn self.innerWidth ||\n\t\t\tjQuery.boxModel && document.documentElement.clientWidth ||\n\t\t\tdocument.body.clientWidth;\n\t\n\tif ( this.get(0) == document )\n\t\treturn Math.max( document.body.scrollWidth, document.body.offsetWidth );\n\t\n\treturn this.css(\"width\");\n};"}]},
{"id":"4796ee8572781df865cdc1bf420c916ce94ed526","instances":[{"path":"./1.0.2/src/dimensions/dimensions.js","lines":[133,154],"code":"\t\tthis.get(0).offsetWidth;\t\n};\n\n/**\n * Returns how many pixels the user has scrolled to the right (scrollLeft).\n * Works on containers with overflow: auto and window/document.\n *\n * @example $(\"#testdiv\").scrollLeft()\n * @result 100\n * \n * @name scrollLeft\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.scrollLeft = function() {\n\tif ( this.get(0) == window || this.get(0) == document )\n\t\treturn self.pageXOffset ||\n\t\t\tjQuery.boxModel && document.documentElement.scrollLeft ||\n\t\t\tdocument.body.scrollLeft;\n\t\n\treturn this.get(0).scrollLeft;\n};"},{"path":"./1.0.2/src/dimensions/dimensions.js","lines":[153,174],"code":"\treturn this.get(0).scrollLeft;\n};\n\n/**\n * Returns how many pixels the user has scrolled to the bottom (scrollTop).\n * Works on containers with overflow: auto and window/document.\n *\n * @example $(\"#testdiv\").scrollTop()\n * @result 100\n * \n * @name scrollTop\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.scrollTop = function() {\n\tif ( this.get(0) == window || this.get(0) == document )\n\t\treturn self.pageYOffset ||\n\t\t\tjQuery.boxModel && document.documentElement.scrollTop ||\n\t\t\tdocument.body.scrollTop;\n\n\treturn this.get(0).scrollTop;\n};"}]},
{"id":"b02f3cf992859e8e3730fbba199eb7024331af8d","instances":[{"path":"./1.0.2/src/event/event.js","lines":[7,83],"code":"/**\n * Toggle between two function calls every other click.\n * Whenever a matched element is clicked, the first specified function \n * is fired, when clicked again, the second is fired. All subsequent \n * clicks continue to rotate through the two functions.\n *\n * @example $(\"p\").toggle(function(){\n *   $(this).addClass(\"selected\");\n * },function(){\n *   $(this).removeClass(\"selected\");\n * });\n * \n * @test var count = 0;\n * var fn1 = function() { count++; }\n * var fn2 = function() { count--; }\n * var link = $('#mark');\n * link.click().toggle(fn1, fn2).click().click().click().click().click();\n * ok( count == 1, \"Check for toggle(fn, fn)\" );\n *\n * @name toggle\n * @type jQuery\n * @param Function even The function to execute on every even click.\n * @param Function odd The function to execute on every odd click.\n * @cat Events\n */\ntoggle: function(a,b) {\n\t// If two functions are passed in, we're\n\t// toggling on a click\n\treturn a && b && a.constructor == Function && b.constructor == Function ? this.click(function(e){\n\t\t// Figure out which function to execute\n\t\tthis.last = this.last == a ? b : a;\n\t\t\n\t\t// Make sure that clicks stop\n\t\te.preventDefault();\n\t\t\n\t\t// and execute the function\n\t\treturn this.last.apply( this, [e] ) || false;\n\t}) :\n\t\n\t// Otherwise, execute the old toggle function\n\tthis._toggle.apply( this, arguments );\n},\n\n/**\n * A method for simulating hovering (moving the mouse on, and off,\n * an object). This is a custom method which provides an 'in' to a \n * frequent task.\n *\n * Whenever the mouse cursor is moved over a matched \n * element, the first specified function is fired. Whenever the mouse \n * moves off of the element, the second specified function fires. \n * Additionally, checks are in place to see if the mouse is still within \n * the specified element itself (for example, an image inside of a div), \n * and if it is, it will continue to 'hover', and not move out \n * (a common error in using a mouseout event handler).\n *\n * @example $(\"p\").hover(function(){\n *   $(this).addClass(\"over\");\n * },function(){\n *   $(this).addClass(\"out\");\n * });\n *\n * @name hover\n * @type jQuery\n * @param Function over The function to fire whenever the mouse is moved over a matched element.\n * @param Function out The function to fire whenever the mouse is moved off of a matched element.\n * @cat Events\n */\nhover: function(f,g) {\n\t\n\t// A private function for haandling mouse 'hovering'\n\tfunction handleHover(e) {\n\t\t// Check if mouse(over|out) are still within the same parent element\n\t\tvar p = (e.type == \"mouseover\" ? e.fromElement : e.toElement) || e.relatedTarget;\n\n\t\t// Traverse up the tree\n\t\twhile ( p && p != this ) try { p = p.parentNode } catch(e) { p = this; };"},{"path":"./1.1.2/src/event/event.js","lines":[365,434],"code":"/**\n * Toggle between two function calls every other click.\n * Whenever a matched element is clicked, the first specified function \n * is fired, when clicked again, the second is fired. All subsequent \n * clicks continue to rotate through the two functions.\n *\n * Use unbind(\"click\") to remove.\n *\n * @example $(\"p\").toggle(function(){\n *   $(this).addClass(\"selected\");\n * },function(){\n *   $(this).removeClass(\"selected\");\n * });\n * \n * @name toggle\n * @type jQuery\n * @param Function even The function to execute on every even click.\n * @param Function odd The function to execute on every odd click.\n * @cat Events\n */\ntoggle: function() {\n\t// Save reference to arguments for access in closure\n\tvar a = arguments;\n\n\treturn this.click(function(e) {\n\t\t// Figure out which function to execute\n\t\tthis.lastToggle = this.lastToggle == 0 ? 1 : 0;\n\t\t\n\t\t// Make sure that clicks stop\n\t\te.preventDefault();\n\t\t\n\t\t// and execute the function\n\t\treturn a[this.lastToggle].apply( this, [e] ) || false;\n\t});\n},\n\n/**\n * A method for simulating hovering (moving the mouse on, and off,\n * an object). This is a custom method which provides an 'in' to a \n * frequent task.\n *\n * Whenever the mouse cursor is moved over a matched \n * element, the first specified function is fired. Whenever the mouse \n * moves off of the element, the second specified function fires. \n * Additionally, checks are in place to see if the mouse is still within \n * the specified element itself (for example, an image inside of a div), \n * and if it is, it will continue to 'hover', and not move out \n * (a common error in using a mouseout event handler).\n *\n * @example $(\"p\").hover(function(){\n *   $(this).addClass(\"hover\");\n * },function(){\n *   $(this).removeClass(\"hover\");\n * });\n *\n * @name hover\n * @type jQuery\n * @param Function over The function to fire whenever the mouse is moved over a matched element.\n * @param Function out The function to fire whenever the mouse is moved off of a matched element.\n * @cat Events\n */\nhover: function(f,g) {\n\t\n\t// A private function for handling mouse 'hovering'\n\tfunction handleHover(e) {\n\t\t// Check if mouse(over|out) are still within the same parent element\n\t\tvar p = (e.type == \"mouseover\" ? e.fromElement : e.toElement) || e.relatedTarget;\n\n\t\t// Traverse up the tree\n\t\twhile ( p && p != this ) try { p = p.parentNode } catch(e) { p = this; };"}]},
{"id":"0615c405d32176bab3cd52503150828e77a4d2f2","instances":[{"path":"./1.0.2/src/fx/fx.js","lines":[288,359],"code":"\t/**\n\t * A function for making your own, custom, animations. The key aspect of\n\t * this function is the object of style properties that will be animated,\n\t * and to what end. Each key within the object represents a style property\n\t * that will also be animated (for example: \"height\", \"top\", or \"opacity\").\n\t *\n\t * The value associated with the key represents to what end the property\n\t * will be animated. If a number is provided as the value, then the style\n\t * property will be transitioned from its current state to that new number.\n\t * Oterwise if the string \"hide\", \"show\", or \"toggle\" is provided, a default\n\t * animation will be constructed for that property.\n\t *\n\t * @example $(\"p\").animate({\n\t *   height: 'toggle', opacity: 'toggle'\n\t * }, \"slow\");\n\t *\n\t * @example $(\"p\").animate({\n\t *   left: 50, opacity: 'show'\n\t * }, 500);\n\t *\n\t * @name animate\n\t * @type jQuery\n\t * @param Hash params A set of style attributes that you wish to animate, and to what end.\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param Function callback A function to be executed whenever the animation completes.\n\t * @cat Effects/Animations\n\t */\n\tanimate: function(prop,speed,callback) {\n\t\treturn this.queue(function(){\n\t\t\n\t\t\tthis.curAnim = prop;\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tvar e = new jQuery.fx( this, jQuery.speed(speed,callback), p );\n\t\t\t\tif ( prop[p].constructor == Number )\n\t\t\t\t\te.custom( e.cur(), prop[p] );\n\t\t\t\telse\n\t\t\t\t\te[ prop[p] ]( prop );\n\t\t\t}\n\t\t\t\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\n\tsetAuto: function(e,p) {"},{"path":"./1.1.2/src/fx/fx.js","lines":[281,362],"code":"\t/**\n\t * A function for making your own, custom animations. The key aspect of\n\t * this function is the object of style properties that will be animated,\n\t * and to what end. Each key within the object represents a style property\n\t * that will also be animated (for example: \"height\", \"top\", or \"opacity\").\n\t *\n\t * Note that properties should be specified using camel case\n\t * eg. marginLeft instead of margin-left.\n\t *\n\t * The value associated with the key represents to what end the property\n\t * will be animated. If a number is provided as the value, then the style\n\t * property will be transitioned from its current state to that new number.\n\t * Otherwise if the string \"hide\", \"show\", or \"toggle\" is provided, a default\n\t * animation will be constructed for that property.\n\t *\n\t * @example $(\"p\").animate({\n\t *   height: 'toggle', opacity: 'toggle'\n\t * }, \"slow\");\n\t *\n\t * @example $(\"p\").animate({\n\t *   left: 50, opacity: 'show'\n\t * }, 500);\n\t *\n\t * @example $(\"p\").animate({\n\t *   opacity: 'show'\n\t * }, \"slow\", \"easein\");\n\t * @desc An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function (Only 'linear' is provided by default, with jQuery).\n\t *\n\t * @name animate\n\t * @type jQuery\n\t * @param Hash params A set of style attributes that you wish to animate, and to what end.\n\t * @param String|Number speed (optional) A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param String easing (optional) The name of the easing effect that you want to use (Plugin Required).\n\t * @param Function callback (optional) A function to be executed whenever the animation completes.\n\t * @cat Effects\n\t */\n\tanimate: function( prop, speed, easing, callback ) {\n\t\treturn this.queue(function(){\n\t\t\n\t\t\tthis.curAnim = jQuery.extend({}, prop);\n\t\t\tvar opt = jQuery.speed(speed, easing, callback);\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tvar e = new jQuery.fx( this, opt, p );\n\t\t\t\tif ( prop[p].constructor == Number )\n\t\t\t\t\te.custom( e.cur(), prop[p] );\n\t\t\t\telse\n\t\t\t\t\te[ prop[p] ]( prop );\n\t\t\t}\n\t\t\t\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\t\n\tspeed: function(speed, easing, fn) {"}]},
{"id":"7831c7dd777002a7a831fbd0ad3645568b25c8ee","instances":[{"path":"./1.0.2/src/fx/fx.js","lines":[407,433],"code":"queue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];\n\t\n\t\tif ( f ) f.apply( elem );\n\t}\n},\n\n/*\n * I originally wrote fx() as a clone of moo.fx and in the process\n * of making it small in size the code became illegible to sane\n * people. You've been warned.\n */\n\nfx: function( elem, options, prop ){\n\n\tvar z = this;\n\n\t// The users options"},{"path":"./1.1.2/src/fx/fx.js","lines":[387,413],"code":"queue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];\n\t\n\t\tif ( f ) f.apply( elem );\n\t}\n},\n\n/*\n * I originally wrote fx() as a clone of moo.fx and in the process\n * of making it small in size the code became illegible to sane\n * people. You've been warned.\n */\n\nfx: function( elem, options, prop ){\n\n\tvar z = this;\n\n\t// The styles"}]},
{"id":"efa1678b1f4cfb132fb335397d45987b5fc7dfab","instances":[{"path":"./1.0.2/src/fx/fx.js","lines":[446,459],"code":"// Simple function for setting a style value\nz.a = function(){\n\tif ( options.step )\n\t\toptions.step.apply( elem, [ z.now ] );\n \n\tif ( prop == \"opacity\" )\n\t\tjQuery.attr(y, \"opacity\", z.now); // Let attr handle opacity\n\telse if ( parseInt(z.now) ) // My hate for IE will never die\n\t\ty[prop] = parseInt(z.now) + \"px\";\n\t\t\n\ty.display = \"block\";\n};\n\t\n// Figure out the maximum number to run to"},{"path":"./1.1.2/src/fx/fx.js","lines":[422,433],"code":"// Simple function for setting a style value\nz.a = function(){\n\tif ( options.step )\n\t\toptions.step.apply( elem, [ z.now ] );\n\n\tif ( prop == \"opacity\" )\n\t\tjQuery.attr(y, \"opacity\", z.now); // Let attr handle opacity\n\telse if ( parseInt(z.now) ) // My hate for IE will never die\n\t\ty[prop] = parseInt(z.now) + \"px\";\n\t\n\ty.display = \"block\"; // Set display property to block for animation\n};"}]},
{"id":"48e8c48b6ecbdc479e329a4731c04bd2f8b4faa9","instances":[{"path":"./1.0.2/src/jquery/jquery.js","lines":[554,653],"code":"/**\n * Retrieve the text contents of all matched elements. The result is\n * a string that contains the combined text contents of all matched\n * elements. This method works on both HTML and XML documents.\n *\n * @example $(\"p\").text();\n * @before <p>Test Paragraph.</p>\n * @result Test Paragraph.\n *\n * @test var expected = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n * ok( $('#sap').text() == expected, 'Check for merged text of more then one element.' );\n *\n * @name text\n * @type String\n * @cat DOM\n */\ntext: function(e) {\n\te = e || this;\n\tvar t = \"\";\n\tfor ( var j = 0; j < e.length; j++ ) {\n\t\tvar r = e[j].childNodes;\n\t\tfor ( var i = 0; i < r.length; i++ )\n\t\t\tif ( r[i].nodeType != 8 )\n\t\t\t\tt += r[i].nodeType != 1 ?\n\t\t\t\t\tr[i].nodeValue : jQuery.fn.text([ r[i] ]);\n\t}\n\treturn t;\n},\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided (which is generated, on the fly, from the provided HTML)\n * and finds the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap(\"<div class='wrap'></div>\");\n * @before <p>Test Paragraph.</p>\n * @result <div class='wrap'><p>Test Paragraph.</p></div>\n * \n * @test var defaultText = 'Try them out:'\n * var result = $('#first').wrap('<div class=\"red\"><span></span></div>').text();\n * ok( defaultText == result, 'Check for wrapping of on-the-fly html' );\n * ok( $('#first').parent().parent().is('.red'), 'Check if wrapper has class \"red\"' );\n *\n * @name wrap\n * @type jQuery\n * @param String html A string of HTML, that will be created on the fly and wrapped around the target.\n * @cat DOM/Manipulation\n */\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided and finding the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n\t * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap( document.getElementById('content') );\n * @before <p>Test Paragraph.</p><div id=\"content\"></div>\n * @result <div id=\"content\"><p>Test Paragraph.</p></div>\n *\n * @test var defaultText = 'Try them out:'\n * var result = $('#first').wrap(document.getElementById('empty')).parent();\n * ok( result.is('ol'), 'Check for element wrapping' );\n * ok( result.text() == defaultText, 'Check for element wrapping' );\n *\n * @name wrap\n * @type jQuery\n * @param Element elem A DOM element that will be wrapped.\n * @cat DOM/Manipulation\n */\nwrap: function() {\n\t// The elements to wrap the target around\n\tvar a = jQuery.clean(arguments);\n\n\t// Wrap each of the matched elements individually\n\treturn this.each(function(){\n\t\t// Clone the structure that we're using to wrap\n\t\tvar b = a[0].cloneNode(true);\n\n\t\t// Insert it before the element to be wrapped\n\t\tthis.parentNode.insertBefore( b, this );\n\n\t\t// Find the deepest point in the wrap structure\n\t\twhile ( b.firstChild )\n\t\t\tb = b.firstChild;"},{"path":"./1.1.2/src/jquery/jquery.js","lines":[533,629],"code":"/**\n * Set the text contents of all matched elements.\n *\n * Similar to html(), but escapes HTML (replace \"<\" and \">\" with their\n * HTML entities).\n *\n * @example $(\"p\").text(\"<b>Some</b> new text.\");\n * @before <p>Test Paragraph.</p>\n * @result <p>&lt;b&gt;Some&lt;/b&gt; new text.</p>\n * @desc Sets the text of all paragraphs.\n *\n * @example $(\"p\").text(\"<b>Some</b> new text.\", true);\n * @before <p>Test Paragraph.</p>\n * @result <p>Some new text.</p>\n * @desc Sets the text of all paragraphs.\n *\n * @name text\n * @type String\n * @param String val The text value to set the contents of the element to.\n * @cat DOM/Attributes\n */\ntext: function(e) {\n\tif ( typeof e == \"string\" )\n\t\treturn this.empty().append( document.createTextNode( e ) );\n\n\tvar t = \"\";\n\tjQuery.each( e || this, function(){\n\t\tjQuery.each( this.childNodes, function(){\n\t\t\tif ( this.nodeType != 8 )\n\t\t\t\tt += this.nodeType != 1 ?\n\t\t\t\t\tthis.nodeValue : jQuery.fn.text([ this ]);\n\t\t});\n\t});\n\treturn t;\n},\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided (which is generated, on the fly, from the provided HTML)\n * and finds the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap(\"<div class='wrap'></div>\");\n * @before <p>Test Paragraph.</p>\n * @result <div class='wrap'><p>Test Paragraph.</p></div>\n * \n * @name wrap\n * @type jQuery\n * @param String html A string of HTML, that will be created on the fly and wrapped around the target.\n * @cat DOM/Manipulation\n */\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided and finding the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n\t * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap( document.getElementById('content') );\n * @before <p>Test Paragraph.</p><div id=\"content\"></div>\n * @result <div id=\"content\"><p>Test Paragraph.</p></div>\n *\n * @name wrap\n * @type jQuery\n * @param Element elem A DOM element that will be wrapped around the target.\n * @cat DOM/Manipulation\n */\nwrap: function() {\n\t// The elements to wrap the target around\n\tvar a = jQuery.clean(arguments);\n\n\t// Wrap each of the matched elements individually\n\treturn this.each(function(){\n\t\t// Clone the structure that we're using to wrap\n\t\tvar b = a[0].cloneNode(true);\n\n\t\t// Insert it before the element to be wrapped\n\t\tthis.parentNode.insertBefore( b, this );\n\n\t\t// Find the deepest point in the wrap structure\n\t\twhile ( b.firstChild )\n\t\t\tb = b.firstChild;"}]},
{"id":"16e6da46b0fede38694602be57eeda53aa5e1c9d","instances":[{"path":"./1.0.2/src/jquery/jquery.js","lines":[1407,1423],"code":"/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];"},{"path":"./1.1.2/src/jquery/jquery.js","lines":[1353,1369],"code":"/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];"}]},
{"id":"19d8f5fc2a3aa033d6655d23da431c3fd731e706","instances":[{"path":"./1.0.2/src/jquery/jquery.js","lines":[2133,2293],"code":"\t/*\n\t * A number of helper functions used for managing events.\n\t * Many of the ideas behind this code orignated from Dean Edwards' addEvent library.\n\t */\n\tevent: {\n\n\t\t// Bind an event to an element\n\t\t// Original by Dean Edwards\n\t\tadd: function(element, type, handler) {\n\t\t\t// For whatever reason, IE has trouble passing the window object\n\t\t\t// around, causing it to be cloned in the process\n\t\t\tif ( jQuery.browser.msie && element.setInterval != undefined )\n\t\t\t\telement = window;\n\n\t\t\t// Make sure that the function being executed has a unique ID\n\t\t\tif ( !handler.guid )\n\t\t\t\thandler.guid = this.guid++;\n\n\t\t\t// Init the element's event structure\n\t\t\tif (!element.events)\n\t\t\t\telement.events = {};\n\n\t\t\t// Get the current list of functions bound to this event\n\t\t\tvar handlers = element.events[type];\n\n\t\t\t// If it hasn't been initialized yet\n\t\t\tif (!handlers) {\n\t\t\t\t// Init the event handler queue\n\t\t\t\thandlers = element.events[type] = {};\n\n\t\t\t\t// Remember an existing handler, if it's already there\n\t\t\t\tif (element[\"on\" + type])\n\t\t\t\t\thandlers[0] = element[\"on\" + type];\n\t\t\t}\n\n\t\t\t// Add the function to the element's handler list\n\t\t\thandlers[handler.guid] = handler;\n\n\t\t\t// And bind the global event handler to the element\n\t\t\telement[\"on\" + type] = this.handle;\n\n\t\t\t// Remember the function in a global list (for triggering)\n\t\t\tif (!this.global[type])\n\t\t\t\tthis.global[type] = [];\n\t\t\tthis.global[type].push( element );\n\t\t},\n\n\t\tguid: 1,\n\t\tglobal: {},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function(element, type, handler) {\n\t\t\tif (element.events)\n\t\t\t\tif (type && element.events[type])\n\t\t\t\t\tif ( handler )\n\t\t\t\t\t\tdelete element.events[type][handler.guid];\n\t\t\t\t\telse\n\t\t\t\t\t\tfor ( var i in element.events[type] )\n\t\t\t\t\t\t\tdelete element.events[type][i];\n\t\t\t\telse\n\t\t\t\t\tfor ( var j in element.events )\n\t\t\t\t\t\tthis.remove( element, j );\n\t\t},\n\n\t\ttrigger: function(type,data,element) {\n\t\t\t// Touch up the incoming data\n\t\t\tdata = data || [];\n\n\t\t\t// Handle a global trigger\n\t\t\tif ( !element ) {\n\t\t\t\tvar g = this.global[type];\n\t\t\t\tif ( g )\n\t\t\t\t\tfor ( var i = 0; i < g.length; i++ )\n\t\t\t\t\t\tthis.trigger( type, data, g[i] );\n\n\t\t\t// Handle triggering a single element\n\t\t\t} else if ( element[\"on\" + type] ) {\n\t\t\t\t// Pass along a fake event\n\t\t\t\tdata.unshift( this.fix({ type: type, target: element }) );\n\n\t\t\t\t// Trigger the event\n\t\t\t\telement[\"on\" + type].apply( element, data );\n\t\t\t}\n\t\t},\n\n\t\thandle: function(event) {\n\t\t\tif ( typeof jQuery == \"undefined\" ) return;\n\n\t\t\tevent = event || jQuery.event.fix( window.event );\n\n\t\t\t// If no correct event was found, fail\n\t\t\tif ( !event ) return;\n\n\t\t\tvar returnValue = true;\n\n\t\t\tvar c = this.events[event.type];\n\n\t\t\tvar args = [].slice.call( arguments, 1 );\n\t\t\targs.unshift( event );\n"},{"path":"./1.1.2/src/jquery/jquery.js","lines":[1751,1796],"code":"/**\n * Contains flags for the useragent, read from navigator.userAgent.\n * Available flags are: safari, opera, msie, mozilla\n *\n * This property is available before the DOM is ready, therefore you can\n * use it to add ready events only for certain browsers.\n *\n * There are situations where object detections is not reliable enough, in that\n * cases it makes sense to use browser detection. Simply try to avoid both!\n *\n * A combination of browser and object detection yields quite reliable results.\n *\n * @example $.browser.msie\n * @desc Returns true if the current useragent is some version of microsoft's internet explorer\n *\n * @example if($.browser.safari) { $( function() { alert(\"this is safari!\"); } ); }\n * @desc Alerts \"this is safari!\" only for safari browsers\n *\n * @property\n * @name $.browser\n * @type Boolean\n * @cat JavaScript\n */\n \n/*\n * Whether the W3C compliant box model is being used.\n *\n * @property\n * @name $.boxModel\n * @type Boolean\n * @cat JavaScript\n */\nnew function() {\n\tvar b = navigator.userAgent.toLowerCase();\n\n\t// Figure out what browser is being used\n\tjQuery.browser = {\n\t\tsafari: /webkit/.test(b),\n\t\topera: /opera/.test(b),\n\t\tmsie: /msie/.test(b) && !/opera/.test(b),\n\t\tmozilla: /mozilla/.test(b) && !/(compatible|webkit)/.test(b)\n\t};\n\n\t// Check to see if the W3C box model is being used\n\tjQuery.boxModel = !jQuery.browser.msie || document.compatMode == \"CSS1Compat\";\n};"}]},
{"id":"88d002ffb7edfc2493f973dabc93bd53b1c70c88","instances":[{"path":"./1.1.2/src/ajax/ajaxTest.js","lines":[99,108],"code":"test(\"test global handlers - success\", function() {\n\texpect(8);\n\tstop();\n\tvar counter = { complete: 0, success: 0, error: 0, send: 0 },\n\t\tsuccess = function() { counter.success++ },\n\t\terror = function() { counter.error++ },\n\t\tcomplete = function() { counter.complete++ },\n\t\tsend = function() { counter.send++ };\n\n\t$('#foo').ajaxStart(complete).ajaxStop(complete).ajaxSend(send).ajaxComplete(complete).ajaxError(error).ajaxSuccess(success);"},{"path":"./1.1.2/src/ajax/ajaxTest.js","lines":[127,135],"code":"test(\"test global handlers - failure\", function() {\n\texpect(8);\n\tstop();\n\tvar counter = { complete: 0, success: 0, error: 0, send: 0 },\n\t\tsuccess = function() { counter.success++ },\n\t\terror = function() { counter.error++ },\n\t\tcomplete = function() { counter.complete++ },\n\t\tsend = function() { counter.send++ };\n\t$.ajaxTimeout(0);"}]}]
